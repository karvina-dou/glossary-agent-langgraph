Anapplication programming interface(API) is a connection betweencomputersor betweencomputer programs. It is a type of softwareinterface, offering a service to other pieces ofsoftware.A document or standard that describes how to build such a connection or interface is called anAPI specification. A computer system that meets this standard is said toimplementorexposean API. The term API may refer either to the specification or to the implementation.
In contrast to auser interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person (theend user) other than acomputer programmerwho is incorporating it into software. An API is often made up of different parts which act as tools or services that are available to the programmer. A program or a programmer that uses one of these parts is said tocallthat portion of the API. The calls that make up the API are also known assubroutines, methods, requests, orendpoints. An API specificationdefinesthese calls, meaning that it explains how to use or implement them.
One purpose of APIs is tohide the internal detailsof how a system works, exposing only those parts a programmer will find useful and keeping them consistent even if the internal details later change. An API may be custom-built for a particular pair of systems, or it may be a shared standard allowinginteroperabilityamong many systems.
The term API is often used to refer toweb APIs,which allow communication between computers that are joined by theinternet. There are also APIs forprogramming languages,software libraries, computeroperating systems, andcomputer hardware. APIs originated in the 1940s, though the term did not emerge until the 1960s and 70s.
An API opens a software system to interactions from the outside. It allows two software systems to communicate across a boundary — an interface — using mutually agreed-upon signals.In other words, an API connects software entities together. Unlike auser interface, an API is typically not visible to users. It is an "under the hood" portion of a software system, used for machine-to-machine communication.
A well-designed API exposes only objects or actions needed by software or software developers. It hides details that have no use. Thisabstractionsimplifies programming.
Building software using APIs has been compared to using building-block toys, such asLegobricks. Software services or software libraries are analogous to the bricks; they may be joined together via their APIs, composing a new software product.The process of joining is calledintegration.
As an example, consider a weather sensor that offers an API. When a certain message is transmitted to the sensor, it will detect the current weather conditions and reply with a weather report. The message that activates the sensor is an APIcall, and the weather report is an APIresponse.A weather forecasting app might integrate with a number of weather sensor APIs, gathering weather data from throughout a geographical area.
An API is often compared to acontract. It represents an agreement between parties: a service provider who offers the API and the software developers who rely upon it. If the API remains stable, or if it changes only in predictable ways, developers' confidence in the API will increase. This may increase their use of the API.
The termAPIinitially described an interface only for end-user-facing programs, known asapplication programs. This origin is still reflected in the name "application programming interface." Today, the term is broader, including alsoutility softwareand evenhardware interfaces.
The idea of the API is much older than the term itself. British computer scientistsMaurice WilkesandDavid Wheelerworked on a modularsoftware libraryin the 1940s forEDSAC, an early computer. Thesubroutinesin this library were stored onpunched paper tapeorganized in afiling cabinet. This cabinet also contained what Wilkes and Wheeler called a "library catalog" of notes about each subroutine and how to incorporate it into a program. Today, such a catalog would be called an API (or an API specification or API documentation) because it instructs a programmer on how to use (or "call") each subroutine that the programmer needs.
Wilkes and Wheeler's bookThe Preparation of Programs for an Electronic Digital Computercontains the first published API specification.Joshua Blochconsiders that Wilkes and Wheeler "latently invented" the API, because it is more of a concept that is discovered than invented.
The term "application program interface" (without an-ingsuffix) is first recorded in a paper calledData structures and techniques for remotecomputer graphicspresented at anAFIPSconference in 1968.The authors of this paper use the term to describe the interaction of anapplication—a graphics program in this case—with the rest of the computer system. A consistent application interface (consisting ofFortransubroutine calls) was intended to free the programmer from dealing with idiosyncrasies of the graphics display device, and to providehardware independenceif the computer or the display were replaced.
The term was introduced to the field ofdatabasesbyC. J. Datein a 1974 paper calledTheRelationalandNetworkApproaches: Comparison of the Application Programming Interface.An API became a part of theANSI/SPARC frameworkfordatabase management systems. This framework treated the application programming interface separately from other interfaces, such as the query interface. Database professionals in the 1970s observed these different interfaces could be combined; a sufficiently rich application interface could support the other interfaces as well.
This observation led to APIs that supported all types of programming, not just application programming. By 1990, the API was defined simply as "a set of services available to a programmer for performing certain tasks" by technologistCarl Malamud.
The idea of the API was expanded again with the dawn ofremote procedure callsandweb APIs. Ascomputer networksbecame common in the 1970s and 80s, programmers wanted to call libraries located not only on their local computers, but on computers located elsewhere. These remote procedure calls were well supported by theJavalanguage in particular. In the 1990s, with the spread of theinternet, standards likeCORBA,COM, andDCOMcompeted to become the most common way to expose API services.
Roy Fielding's dissertationArchitectural Styles and the Design of Network-based Software ArchitecturesatUC Irvinein 2000 outlinedRepresentational state transfer(REST) and described the idea of a "network-based Application Programming Interface" that Fielding contrasted with traditional "library-based" APIs.XMLandJSONweb APIs saw widespread commercial adoption beginning in 2000 and continuing as of 2021. The web API is now the most common meaning of the term API.
TheSemantic Webproposed byTim Berners-Leein 2001 included "semantic APIs" that recast the API as anopen, distributed data interface rather than a software behavior interface.Proprietaryinterfaces and agents became more widespread than open ones, but the idea of the API as a data interface took hold. Because web APIs are widely used to exchange data of all kinds online, API has become a broad term describing much of the communication on the internet.When used in this way, the term API has overlap in meaning with the termcommunication protocol.
The interface to asoftware libraryis one type of API. The API describes and prescribes the "expected behavior" (a specification) while the library is an "actual implementation" of this set of rules.
A single API can have multiple implementations (or none, being abstract) in the form of different libraries that share the same programming interface.
The separation of the API from its implementation can allow programs written in one language to use a library written in another. For example, becauseScalaandJavacompile to compatiblebytecode, Scala developers can take advantage of any Java API.
API use can vary depending on the type of programming language involved.
An API for aprocedural languagesuch asLuacould consist primarily of basic routines to execute code, manipulate data or handle errors while an API for anobject-oriented language, such as Java, would provide a specification of classes and itsclass methods.Hyrum's law states that "With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody."Meanwhile, several studies show that most applications that use an API tend to use a small part of the API.
Language bindingsare also APIs. By mapping the features and capabilities of one language to an interface implemented in another language, a language binding allows a library or service written in one language to be used when developing in another language.Tools such asSWIGand F2PY, aFortran-to-Pythoninterface generator, facilitate the creation of such interfaces.
An API can also be related to asoftware framework: a framework can be based on several libraries implementing several APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by extending its content with new classes plugged into the framework itself.
Moreover, the overall program flow of control can be out of the control of the caller and in the framework's hands byinversion of controlor a similar mechanism.
An API can specify the interface between an application and theoperating system.POSIX, for example, specifies a set of common APIs that aim to enable an application written for a POSIX conformant operating system to becompiledfor another POSIX conformant operating system.
LinuxandBerkeley Software Distributionare examples of operating systems that implement the POSIX APIs.
Microsofthas shown a strong commitment to a backward-compatible API, particularly within itsWindows API(Win32) library, so older applications may run on newer versions of Windows using an executable-specific setting called "Compatibility Mode".
An API differs from anapplication binary interface(ABI) in that an API is source code based while an ABI isbinarybased. For instance,POSIXprovides APIs while theLinux Standard Baseprovides an ABI.
Remote APIs allow developers to manipulate remote resources throughprotocols, specific standards for communication that allow different technologies to work together, regardless of language or platform.
For example, the Java Database Connectivity API allows developers to query many different types ofdatabaseswith the same set of functions, while theJava remote method invocationAPI uses the Java Remote Method Protocol to allowinvocationof functions that operate remotely, but appear local to the developer.
Therefore, remote APIs are useful in maintaining the object abstraction inobject-oriented programming; amethod call, executed locally on aproxyobject, invokes the corresponding method on the remote object, using the remoting protocol, and acquires the result to be used locally as a return value.
A modification of the proxy object will also result in a corresponding modification of the remote object.
Web APIs are the defined interfaces through which interactions happen between an enterprise and applications that use its assets, which also is aService Level Agreement(SLA) to specify the functional provider and expose the service path or URL for its API users. An API approach is an architectural approach that revolves around providing a program interface to a set of services to different applications serving different types of consumers.
When used in the context ofweb development, an API is typically defined as a set of specifications, such asHypertext Transfer Protocol(HTTP) request messages, along with a definition of the structure of response messages, usually in an Extensible Markup Language (XML) or JavaScript Object Notation (JSON) format. An example might be a shipping company API that can be added to an eCommerce-focused website to facilitate ordering shipping services and automatically include current shipping rates, without the site developer having to enter the shipper's rate table into a web database. While "web API" historically has been virtually synonymous withweb service, the recent trend (so-calledWeb 2.0) has been moving away from Simple Object Access Protocol (SOAP) based web services andservice-oriented architecture(SOA) towards more directrepresentational state transfer(REST) styleweb resourcesandresource-oriented architecture(ROA).Part of this trend is related to theSemantic Webmovement towardResource Description Framework(RDF), a concept to promote web-basedontology engineeringtechnologies. Web APIs allow the combination of multiple APIs into new applications known asmashups.In the social media space, web APIs have allowed web communities to facilitate sharing content and data between communities and applications. In this way, content that is created in one place dynamically can be posted and updated to multiple locations on the web.For example, Twitter's REST API allows developers to access core Twitter data and the Search API provides methods for developers to interact with Twitter Search and trends data.
The design of an API has significant impact on its usage.The principle ofinformation hidingdescribes the role of programming interfaces as enablingmodular programmingby hiding the implementation details of the modules so that users of modules need not understand the complexities inside the modules.Thus, the design of an API attempts to provide only the tools a user would expect.The design of programming interfaces represents an important part ofsoftware architecture, the organization of a complex piece of software.
APIs are one of the more common ways technology companies integrate. Those that provide and use APIs are considered as being members of a business ecosystem.
The main policies for releasing an API are:
An important factor when an API becomes public is its "interface stability". Changes to the API—for example adding new parameters to a function call—could break compatibility with the clients that depend on that API.
When parts of a publicly presented API are subject to change and thus not stable, such parts of a particular API should be documented explicitly as "unstable". For example, in theGoogle Guavalibrary, the parts that are considered unstable, and that might change soon, are marked with theJava annotation@Beta.
A public API can sometimes declare parts of itself asdeprecatedor rescinded. This usually means that part of the API should be considered a candidate for being removed, or modified in a backward incompatible way. Therefore, these changes allow developers to transition away from parts of the API that will be removed or not supported in the future.
Client code may contain innovative or opportunistic usages that were not intended by the API designers. In other words, for a library with a significant user base, when an element becomes part of the public API, it may be used in diverse ways.On February 19, 2020,Akamaipublished their annual “State of the Internet” report, showcasing the growing trend of cybercriminals targeting public API platforms at financial services worldwide. From December 2017 through November 2019, Akamai witnessed 85.42 billion credential violation attacks. About 20%, or 16.55 billion, were against hostnames defined as API endpoints. Of these, 473.5 million have targeted financial services sector organizations.
API documentation describes what services an API offers and how to use those services, aiming to cover everything a client would need to know for practical purposes.
Documentation is crucial for the development and maintenance of applications using the API.API documentation is traditionally found in documentation files but can also be found in social media such as blogs, forums, and Q&A websites.
Traditional documentation files are often presented via a documentation system, such as Javadoc or Pydoc, that has a consistent appearance and structure.
However, the types of content included in the documentation differs from API to API.
In the interest of clarity, API documentation may include a description of classes and methods in the API as well as "typical usage scenarios, code snippets, design rationales, performance discussions, and contracts", but implementation details of the API services themselves are usually omitted. It can take a number of forms, including instructional documents, tutorials, and reference works. It'll also include a variety of information types, including guides and functionalities.
Restrictions and limitations on how the API can be used are also covered by the documentation. For instance, documentation for an API function could note that its parameters cannot be null, that the function itself is notthread safe.Because API documentation tends to be comprehensive, it is a challenge for writers to keep the documentation updated and for users to read it carefully, potentially yielding bugs.
API documentation can be enriched with metadata information likeJava annotations. This metadata can be used by the compiler, tools, and by therun-timeenvironment to implement custom behaviors or custom handling.
It is possible to generate API documentation in a data-driven manner. By observing many programs that use a given API, it is possible to infer the typical usages, as well the required contracts and directives.Then, templates can be used to generate natural language from the mined data.
In 2010, Oracle Corporation sued Google for having distributed a new implementation of Java embedded in the Android operating system.Google had not acquired any permission to reproduce the Java API, although permission had been given to the similar OpenJDK project. JudgeWilliam Alsupruled in theOracle v. Googlecase that APIs cannot becopyrightedin the U.S. and that a victory for Oracle would have widely expanded copyright protection to a "functional set of symbols" and allowed the copyrighting of simple software commands:
To accept Oracle's claim would be to allow anyone to copyright one version of code to carry out a system of commands and thereby bar all others from writing its different versions to carry out all or part of the same commands.
Alsup's ruling was overturned in 2014 on appeal  to theCourt of Appeals for the Federal Circuit, though the question of whether such use of APIs constitutesfair usewas left unresolved.
In 2016, following a two-week trial, a jury determined that Google's reimplementation of the Java API constitutedfair use, but Oracle vowed to appeal the decision.Oracle won on its appeal, with the Court of Appeals for the Federal Circuit ruling that Google's use of the APIs did not qualify for fair use.In 2019, Google appealed to theSupreme Court of the United Statesover both the copyrightability and fair use rulings, and the Supreme Court granted review.Due to theCOVID-19 pandemic, the oral hearings in the case were delayed until October 2020.
The case was decided by the Supreme Court in Google's favor.