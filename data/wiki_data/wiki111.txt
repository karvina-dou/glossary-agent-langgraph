Software as a service(SaaS/sæs/) is acloud computingservice model where the provider offers use ofapplication softwareto a client and manages all needed physical and software resources.SaaS is usually accessed via aweb application. Unlike othersoftware deliverymodels, it separates "the possession and ownership of software from its use".SaaS use began around 2000, and by 2023 was the main form of software application deployment.
Unlike most self-hosted software products, only one version of the software existsand only oneoperating systemand configuration is supported. SaaS products typically run on rentedinfrastructure as a service(IaaS) orplatform as a service(PaaS) systems includinghardwareand sometimesoperating systemsandmiddleware, to accommodate rapid increases in usage while providing instant and continuous availability to customers. SaaS customers have the abstraction of limitless computing resources, whileeconomy of scaledrives down the cost. SaaS architectures are typicallymulti-tenant; usually they share resources between clients for efficiency, but sometimes they offer a siloed environment for an additional fee. Common SaaS revenue models includefreemium,subscription, and usage-based fees. Unlike traditional software, it is rarely possible to buy a perpetual license for a certain version of the software.
There are no specificsoftware developmentpractices that distinguish SaaS from other application development, although there is often a focus on frequenttestingand releases.
Infrastructure as a service(IaaS) is the most basic form ofcloud computing, where infrastructure resources—such as physical computers—are not owned by the user but instead leased from a cloud provider. As a result, infrastructure resources can be increased rapidly, instead of waiting weeks for computers to ship and set up. IaaS requires time and expertise to make use of the infrastructure in the form ofoperating systemsandapplications.Platform as a service(PaaS) includes the operating system andmiddleware, but not the applications.SaaS providers typically use PaaS or IaaS services to run their applications.
Without IaaS, it would be extremely difficult to make an SaaS product scalable for a variable number of users while providing the instant and continual availability that customers expect.Most end users consume only the SaaS product and do not have to worry about the technical complexity of the physical hardware and operating system.Because cloud resources can be accessed without any human interactions, SaaS customers are provided with the abstraction of limitless computing resources, whileeconomy of scaledrives down the cost.Another key feature of cloud computing is that software updates can be rolled out and made available to all customers nearly instantaneously.In 2019, SaaS was estimated to make up the plurality, 43 percent, of the cloud computing market while IaaS and PaaS combined account for approximately 25 percent.
In the 1960s,multitaskingwas invented, enablingmainframe computersto serve multiple users simultaneously. Over the next decade,timesharingbecame the main business model for computing, andcluster computingenabled multiple computers to work together.Cloud computing emerged in the late 1990s with companies likeAmazon(1994),Salesforce(1999), and Concur (1993) offeringInternet-basedapplicationson a pay-per-use basis. All of these focused on a single product to seize a highmarket share.Beginning withGmailin 2004, email services were some of the first SaaS products to be mass-marketed to consumers.The market for SaaS grew rapidly throughout the early twenty-first century.Initially viewed as a technological innovation, SaaS has come to be perceived more as a business model.By 2023, SaaS had become the primary method that companies deliver applications.
Popular consumer SaaS products include allsocial mediawebsites, email services likeGmailand its associatedGoogle Docs Editors,Skype,Dropbox,and entertainment products likeNetflixandSpotify.Enterprise SaaS products includeSalesforce'scustomer relationship management(CRM) software,SAP Cloud Platform, andOracle Cloud Enterprise Resource Planning.
Some SaaS providers offer free services to consumers that are funded by means such asadvertising,affiliate marketing, or selling consumer data.One of the most popular models for Internet start-ups and mobile apps isfreemium, where the company charges for continued use or a higher level of service. Even if the user never upgrades to the paid version, it helps the company capture a higher market share and displace customers from a rival.However, the company's hosting cost increases with the number of users, regardless of whether it is successful at enticing them to use the paid version.Another common model is where the free version only provides demonstration (crippleware). Online marketplaces may charge a fee on transactions to cover the SaaS provider costs.It used to be more common for SaaS products to be offered for a one-time cost, but this model is declining in popularity.A fewSaaS products haveopen sourcecode, called open SaaS. This model can provide advantages such as reduced deployment cost, less vendor commitment, and moreportableapplications.
The most common SaaS revenue models involve subscription and pay for usage.For customers, the advantages include reduced upfront cost, increased flexibility, and lower overall cost compared to traditional software with perpetualsoftware licenses.In some cases, the steep one-time cost demanded by sellers of traditional software were out of the reach ofsmaller businesses, but pay-per-use SaaS models makes the software affordable.Usage may be charged based on the number of users, transactions, amount of storage spaced used, or other metrics.Many buyers prefer pay-per-usage because they believe that they are relatively light users of the software, and the seller benefits by reaching occasional users who would otherwise not buy the software.However, it can cause revenue uncertainty for the seller and increases the overhead forbilling.
The subscription model of SaaS offers a continuing and renewable revenue stream to the provider, although vulnerable to cancellation.If a significant number are cancelled, the viability of the business can be placed in jeopardy.The ease of canceling a subscription and switching to a competitor leave customers with the leverage to get concessions from the seller.While recurring revenues can help the business and attract investors, the need forcustomer serviceskills in convincing the customer to renew their subscription is a challenge for providers switching to subscription from other revenue models.
SaaS products are typically accessed via aweb browseras a publicly availableweb application.This means that customers can access the application anywhere from any device without needing toinstallorupdateit.SaaS providers often try to minimize the difficulty of signing up for the product.Many capitalize on the service-oriented structure to respond to customer feedback and evolve their product quickly to meet demands. This can enable customers to believe in the continued improvement of the product and help the SaaS provider get customers from an established traditional software company that likely can offer a deeper feature set.
Although on-premises software is often less secure than SaaS alternatives,security and privacy are among the main reasons cited by companies that do not adopt SaaS products.SaaS companies have to protect their publicly available offerings from abuse, includingdenial-of-serviceattacks and hacking.They often use technologies such asaccess control,authentication, andencryptionto protectdata confidentiality.Nevertheless, not all companies trust SaaS providers to keep sensitive data secured.The vendor is responsible forsoftware updates, includingsecurity patches, and for protecting the customers' data.SaaS systems inherently have a greaterlatencythan software run on-premises due to the time for network packets to be delivered to the cloud facility. This can be prohibitive for some uses, such as time-sensitive industrial processes or warehousing.
The rise of SaaS products is one factor leading many companies switched from budgeting forITas acapital expenditureto anoperating expenditure.The process of migration to SaaS and supporting it can also be a significant cost that must be accounted for.
A challenge for SaaS providers is that demand is not known in advance. Their system must have enough slack to be able to handle all users without turning any away, but without paying for too many resources that will be unnecessary. If resources are static, they are guaranteed to be wasted during non-peak time.Sometimes cheaper off-peak rates are offered to balance the load and reduce waste.The expectation for continuous service is so high that outages in SaaS software are often reported in the news.
There are not specificsoftware developmentpractices that differentiate SaaS from other application development.SaaS products are often released early and often to take advantage of the flexibility of the SaaS delivery model.Agile software developmentis commonly used to support this release schedule.Many SaaS developers usetest-driven development, or otherwise emphasize frequentsoftware testing, because of the need to ensure availability of their service and rapid deployment.Domain-driven design, in which business goals drive development, is popular because SaaS products must sell themselves to the customer by being useful.SaaS developers do not know in advance which devices customers will try to access the product from—such as a desktop computer, tablet, or smartphone—and supporting a wide range of devices is often an important concern for thefront-end developmentteam.Progressive web applicationsallow some functionality to be available even if the device is offline.
SaaS applications predominantly offer integration protocols andapplication programming interfaces(APIs) that operate over awide area network.
SaaS architecture varies significantly from product to product.Nevertheless, most SaaS providers offer amulti-tenantarchitecture.With this model, a singleversionof the application, with a singleconfiguration(hardware,network,operating system), is used for all customers ("tenants").This means that the company does not need to support multiple versions and configurations.The architectural shift from each customer running their own version of the software on their own hardware affects many aspects of the application's design and security features.In a multi-tenant architecture, manyresourcescan be used by different tenants or shared between multiple tenants.
The structure of a typical SaaS application can be separated into application and control planes.SaaS products differ in how these planes are separated, which might be closely integrated or loosely coupled in an event- or message-driven model.The control plane is in charge of directing the system and covers functionality such as tenant onboarding, billing, and metrics, as well as the system used by the SaaS provider to configure, manage, and operate the service.Many SaaS products are offered at different levels of service for different prices, calledtiering. This can also affect the architecture for both planes, although it is commonly placed in the control plane.Unlike the application plane, the services in the control plane are not designed for multitenancy.
The application plane—which varies a great deal depending on the nature of the product—implements the core functionality of the SaaS product.Key design issues include separating different tenants so they cannot view or change other tenants' data or resources.Except for the simplest SaaS applications, somemicroservicesand other resources are allocated on a per-tenant basis, rather than shared between all tenants.Routing functionality is necessary to direct tenant requests to the appropriate services.
Some SaaS products do not share any resources between tenants—called siloing. Although this negates many of the efficiency benefits of SaaS, it makes it easier to migratelegacy softwareto SaaSand is sometimes offered as a premium offering at a higher price.Pooling all resources might make it possible to achieve higher efficiency,but an outage affects all customers so availability must be prioritized to a greater extent.Many systems use a combination of both approaches, pooling some resources and siloing others.Other companies group multiple tenants into pods and share resources between them.
In the United States, constitutionalsearch warrantlaws do not protect all forms of SaaS dynamically stored data. The result is that governments may be able to request data from SaaS providers without the owner's consent.
Certainopen-source licensessuch asGPL-2.0do not explicitly grant rights permitting distribution as a SaaS product in Germany.