Software-defined networking(SDN) is an approach tonetwork managementthat uses abstraction to enable dynamic and programmatically efficient network configuration to create grouping and segmentation while improving network performance and monitoring in a manner more akin tocloud computingthan to traditional network management.SDN is meant to improve the static architecture of traditional networks and may be employed to centralize network intelligence in one network component by disassociating the forwarding process ofnetwork packets(data plane) from the routing process (control plane).The control plane consists of one or more controllers, which are considered the brains of the SDN network, where the whole intelligence is incorporated. However, centralization has certain drawbacks related to security,scalability and elasticity.
SDN was commonly associated with theOpenFlowprotocol for remote communication with network plane elements to determine the path ofnetwork packetsacrossnetwork switchessince OpenFlow's emergence in 2011. However, since 2012, proprietary systems have also used the term.These includeCisco Systems' Open Network Environment andNicira'snetwork virtualization platform.
SD-WANapplies similar technology to awide area network(WAN).
The history of SDN principles can be traced back to the separation of the control and data plane first used in public switched telephone networks.This provided a manner of simplifying provisioning and management years before the architecture was used in data networks.
TheInternet Engineering Task Force(IETF) began considering various ways to decouple the control and data forwarding functions in a proposed interface standard published in 2004 named Forwarding and Control Element Separation (ForCES).The ForCES Working Group also proposed a companion SoftRouter architecture.Additional early standards from the IETF that pursued separating control from data include the Linux Netlink as an IP services protocoland a path computation element (PCE)-based architecture.
These early attempts failed to gain traction. One reason is that many in the Internet community viewed separating control from data to be risky, especially given the potential for failure in the control plane. Another reason is that vendors were concerned that creating standard application programming interfaces (APIs) between the control and data planes would result in increased competition.
The use of open-source software in these separated architectures traces its roots to the Ethane project atStanford's computer science department. Ethane's simple switch design led to the creation of OpenFlow,and an API for OpenFlow was first created in 2008.In that same year, NOX, an operating system for networks, was created.
SDN research includedemulatorssuch as vSDNEmul,EstiNet,and Mininet.
Work on OpenFlow continued at Stanford, including with the creation of testbeds to evaluate the use of the protocol in a single campus network, as well as across the WAN as a backbone for connecting multiple campuses.In academic settings, there were several research and production networks based on OpenFlow switches fromNECandHewlett-Packard, as well as those based onQuanta Computerwhiteboxes starting in about 2009.
Beyond academia, the first deployments were byNicirain 2010 to control OVS from Onix, codeveloped with NTT and Google. A notable deployment wasGoogle's B4 in 2012.Later, Google announced the first OpenFlow/Onix deployments in is datacenters.Another large deployment exists atChina Mobile.
TheOpen Networking Foundationwas founded in 2011 to promote SDN and OpenFlow.
At the 2014 Interop and Tech Field Day, software-defined networking was demonstrated byAvayausing shortest-path bridging (IEEE 802.1aq) andOpenStackas an automated campus, extending automation from the data center to the end device and removing manual provisioning from service delivery.
SDN architectures decouple network control (control plane) and forwarding (data plane) functions, enabling the network control to become directly programmable and the underlying infrastructure to be abstracted from applications and network services.
The OpenFlow protocol can be used in SDN technologies. The SDN architecture is:
The explosion of mobile devices and content, server virtualization, and the advent of cloud services are among the trends driving the networking industry to re-examine traditional network architectures.Many conventional networks are hierarchical, built with tiers of Ethernet switches arranged in a tree structure. This design made sense when client-server computing was dominant, but such a static architecture may be ill-suited to the dynamic computing and storage needs of today's enterprise data centers, campuses, and carrier environments.Some of the key computing trends driving the need for a new network paradigm include:
The following list defines and explains the SDN architectural components:
The implementation of the SDN control plane can follow a centralized, hierarchical, or decentralized design. Initial SDN control plane proposals focused on a centralized solution, where a single control entity has a global view of the network. While this simplifies the implementation of the control logic, it has scalability limitations as the size and dynamics of the network increase. To overcome these limitations, several approaches have been proposed in the literature that fall into two categories, hierarchical and fully distributed approaches. In hierarchical solutions,distributed controllers operate on a partitioned network view, while decisions that require network-wide knowledge are taken by a logically centralized root controller. In distributed approaches,controllers operate on their local view or they may exchange synchronization messages to enhance their knowledge. Distributed solutions are more suitable for supporting adaptive SDN applications.
A key issue when designing a distributed SDN control plane is to decide on the number and placement of control entities. An important parameter to consider while doing so is the propagation delay between the controllers and the network devices,especially in the context of large networks. Other objectives that have been considered involve control path reliability,fault tolerance,and application requirements.
In SDN, the data plane is responsible for processing data-carrying packets using a set of rules specified by the control plane. The data plane may be implemented in physical hardware switches or in software implementations, such asOpen vSwitch. The memory capacity of hardware switches may limit the number of rules that can be stored where as software implementations may have higher capacity.
The location of the SDN data plane and agent can be used to classify SDN implementations:
Flow table entries may be populated in a proactive, reactive, or hybrid fashion.In the proactive mode, the controller populates flow table entries for all possible traffic matches possible for this switch in advance. This mode can be compared with typical routing table entries today, where all static entries are installed ahead of time. Following this, no request is sent to the controller since all incoming flows will find a matching entry. A major advantage in proactive mode is that all packets are forwarded in line rate (considering all flow table entries in TCAM) and no delay is added. In the reactive mode, entries are populated on demand. If a packet arrives without a corresponding match rule in the flow table, the SDN agent sends a request to the controller for further instruction it the reactive mode. The controller examines the SDN agent requests and provides instructions, installing a rule in the flow table for the corresponding packet if necessary.  The hybrid mode uses the low-latency proactive forwarding mode for a portion of traffic while relying on the flexibility of reactive mode processing for the remaining traffic.
Software-defined mobile networking(SDMN)is an approach to the design of mobile networks where all protocol-specific features are implemented in software, maximizing the use of generic and commodity hardware and software in both thecore networkandradio access network.It is proposed as an extension of SDN paradigm to incorporatemobile networkspecific functionalities.Since 3GPP Rel.14, a Control User Plane Separation was introduced in the Mobile Core Network architectures with thePFCPprotocol.
AnSD-WANis a WAN managed using the principles of software-defined networking.The main driver of SD-WAN is to lower WAN costs using more affordable and commercially available leased lines, as an alternative or partial replacement of more expensiveMPLSlines.  Control and management is administered separately from the hardware with central controllers allowing for easier configuration and administration.
An SD-LAN is aLocal area network(LAN) built around the principles of software-defined networking, though there are key differences in topology, network security, application visibility and control, management and quality of service.SD-LAN decouples control management, and data planes to enable a policy driven architecture for wired and wireless LANs. SD-LANs are characterized by their use of a  cloud management system and wireless connectivity without the presence of a physical controller.
SDN architecture may enable, facilitate or enhance network-related security applications due to the controller's central view of the network, and its capacity to reprogram the data plane at any time. While the security of SDN architecture itself remains an open question that has already been studied a couple of times in the research community,the following paragraphs only focus on the security applications made possible or revisited using SDN.
Several research works on SDN have already investigated security applications built upon the SDN controller, with different aims in mind. Distributed Denial of Service (DDoS) detection and mitigation,as well as botnetand worm propagation,are some concrete use-cases of such applications: basically, the idea consists in periodically collecting network statistics from the forwarding plane of the network in a standardized manner (e.g. using Openflow), and then apply classification algorithms on those statistics in order to detect any network anomalies. If an anomaly is detected, the application instructs the controller how to reprogram the data plane in order to mitigate it.
Another kind of security application leverages the SDN controller by implementing some moving target defense (MTD) algorithms. MTD algorithms are typically used to make any attack on a given system or network more difficult than usual by periodically hiding or changing key properties of that system or network. In traditional networks, implementing MTD algorithms is not a trivial task since it is difficult to build a central authority able of determining - for each part of the system to be protected -  which key properties are hidden or changed. In an SDN network, such tasks become more straightforward thanks to the centrality of the controller. One application can for example periodically assign virtual IPs to hosts within the network, and the mapping virtual IP/real IP is then performed by the controller.Another application can simulate some fake opened/closed/filtered ports on random hosts in the network in order to add significant noise during reconnaissance phase (e.g. scanning) performed by an attacker.
Additional value regarding security in SDN enabled networks can also be gained using FlowVisorand FlowCheckerrespectively. The former tries to use a single hardware forwarding plane sharing multiple separated logical networks. Following this approach the same hardware resources can be used for production and development purposes as well as separating monitoring, configuration and internet traffic, where each scenario can have its own logical topology which is called slice. In conjunction with this approach FlowCheckerrealizes the validation of new OpenFlow rules that are deployed by users using their own slice.
SDN controller applications are mostly deployed in large-scale scenarios, which requires comprehensive checks of possible programming errors. A system to do this called NICE was described in 2012.Introducing an overarching security architecture requires a comprehensive and protracted approach to SDN. Since it was introduced, designers are looking at possible ways to secure SDN that do not compromise scalability. One architecture called SN-SECA (SDN+NFV) Security Architecture.
Distributed applications that run across datacenters usually replicate data for the purpose of synchronization, fault resiliency, load balancing and getting data closer to users (which reduces latency to users and increases their perceived throughput). Also, many applications, such as Hadoop, replicate data within a datacenter across multiple racks to increase fault tolerance and make data recovery easier. All of these operations require data delivery from one machine or datacenter to multiple machines or datacenters. The process of reliably delivering data from one machine to multiple machines is referred to as Reliable Group Data Delivery (RGDD).
SDN switches can be used for RGDD via installation of rules that allow forwarding to multiple outgoing ports. For example, OpenFlow provides support for Group Tables since version 1.1which makes this possible. Using SDN, a central controller can carefully and intelligently setup forwarding trees for RGDD. Such trees can be built while paying attention to network congestion/load status to improve performance. For example, MCTCPis a scheme for delivery to many nodes inside datacenters that relies on regular and structured topologies of datacenter networks while DCCastand QuickCastare approaches for fast and efficient data and content replication across datacenters over private WANs.
Network Function Virtualization, or NFV for short, is a concept that complements SDN.  Thus, NFV is not dependent on SDN or SDN concepts.  NFV separates software from hardware to enable flexible network deployment and dynamic operation. NFV deployments typically use commodity servers to run network services software versions that previously were hardware-based. These software-based services that run in an NFV environment are called Virtual Network Functions (VNF).SDN-NFV hybrid program was provided for high efficiency, elastic and scalable capabilities  NFV aimed at accelerating service innovation and provisioning using standard IT virtualization technologies.SDN provides the agility of controlling the generic forwarding devices such as the routers and switches by using SDN controllers. On the other hand, NFV agility is provided for the network applications by using virtualized servers. It is entirely possible to implement a virtualized network function (VNF) as a standalone entity using existing networking and orchestration paradigms. However, there are inherent benefits in leveraging SDN concepts to implement and manage an NFV infrastructure, particularly when looking at the management and orchestration of VNFs, and that's why multivendor platforms are being defined that incorporate SDN and NFV in concerted ecosystems.
Deep packet inspection(DPI) provides network with application-awareness, while SDN provides applications with network-awareness.Although SDN will radically change the generic network architectures, it should cope with working with traditional network architectures to offer high interoperability. The new SDN based network architecture should consider all the capabilities that are currently provided in separate devices or software other than the main forwarding devices (routers and switches) such as the DPI, security appliances
When using an SDN based model for transmitting multimedia traffic, an important aspect to take account is the QoE estimation. To estimate the QoE, first we have to be able to classify the traffic and then, it's recommended that the system can solve critical problems on its own by analyzing the traffic.