Hypertext Transfer Protocol Secure(HTTPS) is an extension of theHypertext Transfer Protocol(HTTP). It usesencryptionforsecure communicationover acomputer network, and is widely used on theInternet.In HTTPS, thecommunication protocolis encrypted usingTransport Layer Security(TLS) or, formerly,Secure Sockets Layer(SSL). The protocol is therefore also referred to asHTTP over TLS,orHTTP over SSL.
The principal motivations for HTTPS areauthenticationof the accessedwebsiteand protection of theprivacyandintegrityof the exchanged data while it is in transit. It protects againstman-in-the-middle attacks, and the bidirectionalblock cipher encryptionof communications between a client and server protects the communications againsteavesdroppingandtampering.The authentication aspect of HTTPS requires a trusted third party to sign server-sidedigital certificates. This was historically an expensive operation, which meant fully authenticated HTTPS connections were usually found only on secured payment transaction services and other secured corporate information systems on theWorld Wide Web. In 2016, a campaign by theElectronic Frontier Foundationwith the support ofweb browserdevelopers led to the protocol becoming more prevalent.HTTPS is now used more often by web users than the original, non-secure HTTP, primarily to protect page authenticity on all types of websites, secure accounts, and keep user communications, identity, and web browsing private.
TheUniform Resource Identifier(URI) schemeHTTPShas identical usage syntax to the HTTP scheme. However, HTTPS signals the browser to use an added encryption layer of SSL/TLS to protect the traffic. SSL/TLS is especially suited for HTTP, since it can provide some protection even if only one side of the communication isauthenticated. This is the case with HTTP transactions over the Internet, where typically only theserveris authenticated (by the client examining the server'scertificate).
HTTPS creates a secure channel over an insecure network. This ensures reasonable protection fromeavesdroppersandman-in-the-middle attacks, provided that adequatecipher suitesare used and that the server certificate is verified and trusted.
Because HTTPS piggybacks HTTP entirely on top of TLS, the entirety of the underlying HTTP protocol can be encrypted. This includes the request'sURL, query parameters, headers, and cookies (which often contain identifying information about the user). However, because website addresses andportnumbers are necessarily part of the underlyingTCP/IPprotocols, HTTPS cannot protect their disclosure. In practice this means that even on a correctly configured web server, eavesdroppers can infer the IP address and port number of the web server, and sometimes even the domain name (e.g. www.example.org, but not the rest of the URL) that a user is communicating with, along with the amount of data transferred and the duration of the communication, though not the content of the communication.
Web browsers know how to trust HTTPS websites based oncertificate authoritiesthat come pre-installed in their software. Certificate authorities are in this way being trusted by web browser creators to provide valid certificates. Therefore, a user should trust an HTTPS connection to a websiteif and only ifall of the following are true:
HTTPS is especially important over insecure networks and networks that may be subject to tampering.  Insecure networks, such as publicWi-Fiaccess points, allow anyone on the same local network topacket-sniffand discover sensitive information not protected by HTTPS. Additionally, some free-to-use and paidWLANnetworks have been observed tampering with webpages by engaging inpacket injectionin order to serve their own ads on other websites. This practice can be exploited maliciously in many ways, such as by injectingmalwareonto webpages and stealing users' private information.
HTTPS is also important for connections over theTor network, as malicious Tor nodes could otherwise damage or alter the contents passing through them in an insecure fashion and inject malware into the connection. This is one reason why theElectronic Frontier Foundationandthe Tor Projectstarted the development ofHTTPS Everywhere,which is included in Tor Browser.
As more information is revealed about globalmass surveillanceand criminals stealing personal information, the use of HTTPS security on all websites is becoming increasingly important regardless of the type of Internet connection being used.Even thoughmetadataabout individual pages that a user visits might not be considered sensitive, when aggregated it can reveal a lot about the user and compromise the user's privacy.
Deploying HTTPS also allows the use ofHTTP/2andHTTP/3(and their predecessorsSPDYandQUIC), which are new HTTP versions designed to reduce page load times, size, and latency.
It is recommended to useHTTP Strict Transport Security(HSTS) with HTTPS to protect users from man-in-the-middle attacks, especiallySSL stripping.
HTTPS should not be confused with the seldom-usedSecure HTTP(S-HTTP) specified in RFC 2660.
As of April 2018, 33.2% of Alexa top 1,000,000 websites use HTTPS as defaultand 70% of page loads (measured by Firefox Telemetry) use HTTPS.As of December 2022, 58.4% of the Internet's 135,422 most popular websites have a secure implementation of HTTPS,However, despiteTLS 1.3's release in 2018, adoption has been slow, with many still remaining on the older TLS 1.2 protocol.
Mostbrowsersdisplay a warning if they receive an invalid certificate. Older browsers, when connecting to a site with an invalid certificate, would present the user with adialog boxasking whether they wanted to continue. Newer browsers display a warning across the entire window. Newer browsers also prominently display the site's security information in theaddress bar.Extended validation certificatesshow the legal entity on the certificate information. Most browsers also display a warning to the user when visiting a site that contains a mixture of encrypted and unencrypted content. Additionally, manyweb filtersreturn a security warning when visiting prohibited websites.
TheElectronic Frontier Foundation, opining that "In an ideal world, every web request could be defaulted to HTTPS", has provided an add-on called HTTPS Everywhere forMozilla Firefox,Google Chrome,Chromium, andAndroid, which enables HTTPS by default for hundreds of frequently used websites.
Forcing a web browser to load only HTTPS content has been supported in Firefox starting in version 83.Starting in version 94, Google Chrome is able to "always use secure connections" if toggled in the browser's settings.
The security of HTTPS is that of the underlying TLS, which typically uses long-termpublicand private keys to generate a short-termsession key, which is then used to encrypt the data flow between the client and the server.X.509certificates are used to authenticate the server (and sometimes the client as well). As a consequence,certificate authoritiesandpublic key certificatesare necessary to verify the relation between the certificate and its owner, as well as to generate, sign, and administer the validity of certificates. While this can be more beneficial than verifying the identities via aweb of trust, the2013 mass surveillance disclosuresdrew attention to certificate authorities as a potential weak point allowingman-in-the-middle attacks.An important property in this context isforward secrecy, which ensures that encrypted communications recorded in the past cannot be retrieved and decrypted should long-term secret keys or passwords be compromised in the future. Not all web servers provide forward secrecy.
For HTTPS to be effective, a site must be completely hosted over HTTPS.  If some of the site's contents are loaded over HTTP (scripts or images, for example), or if only a certain page that contains sensitive information, such as a log-in page, is loaded over HTTPS while the rest of the site is loaded over plain HTTP, the user will be vulnerable to attacks and surveillance. Additionally,cookieson a site served through HTTPS must have thesecure attributeenabled.  On a site that has sensitive information on it, the user and the session will get exposed every time that site is accessed with HTTP instead of HTTPS.
HTTPSURLsbegin with "https://" and useport443 by default, whereas,HTTPURLs begin with "http://" and use port 80 by default.
HTTP is not encrypted and thus is vulnerable toman-in-the-middleandeavesdropping attacks, which can let attackers gain access to website accounts and sensitive information, and modify webpages to injectmalwareor advertisements. HTTPS is designed to withstand such attacks and is considered secure against them (with the exception of HTTPS implementations that use deprecated versions of SSL).
HTTP operates at the highest layer of theTCP/IP model—theapplication layer; as does theTLSsecurity protocol (operating as a lower sublayer of the same layer), which encrypts an HTTP message prior to transmission and decrypts a message upon arrival. Strictly speaking, HTTPS is not a separate protocol, but refers to the use of ordinaryHTTPover anencryptedSSL/TLS connection.
HTTPS encrypts all message contents, including the HTTP headers and the request/response data. With the exception of the possibleCCAcryptographic attack described in thelimitationssection below, an attacker should at most be able to discover that a connection is taking place between two parties, along with their domain names and IP addresses.
To prepare a web server to accept HTTPS connections, the administrator must create apublic key certificatefor the web server. This certificate must be signed by a trustedcertificate authorityfor the web browser to accept it without warning. The authority certifies that the certificate holder is the operator of the web server that presents it. Web browsers are generally distributed with a list ofsigning certificates of major certificate authoritiesso that they can verify certificates signed by them.
A number of commercialcertificate authoritiesexist, offering paid-for SSL/TLS certificates of a number of types, includingExtended Validation Certificates.
Let's Encrypt, launched in April 2016,provides free and automated service that delivers basic SSL/TLS certificates to websites.According to theElectronic Frontier Foundation, Let's Encrypt will make switching from HTTP to HTTPS "as easy as issuing one command, or clicking one button."The majority of web hosts and cloud providers now leverage Let's Encrypt, providing free certificates to their customers.
The system can also be used for clientauthenticationin order to limit access to a web server to authorized users. To do this, the site administrator typically creates a certificate for each user, which the user loads into their browser. Normally, the certificate contains the name and e-mail address of the authorized user and is automatically checked by the server on each connection to verify the user's identity, potentially without even requiring a password.
An important property in this context isperfect forward secrecy(PFS). Possessing one of the long-term asymmetric secret keys used to establish an HTTPS session should not make it easier to derive the short-term session key to then decrypt the conversation, even at a later time.Diffie–Hellman key exchange(DHE) andElliptic-curve Diffie–Hellmankey exchange (ECDHE) are in 2013 the only schemes known to have that property. In 2013, only 30% of Firefox, Opera, and Chromium Browser sessions used it, and nearly 0% of Apple'sSafariandMicrosoft Internet Explorersessions.TLS 1.3, published in August 2018, dropped support for ciphers without forward secrecy. As of February 2019, 96.6% of web servers surveyed support some form of forward secrecy, and 52.1% will use forward secrecy with most browsers.As of July 2023, 99.6% of web servers surveyed support some form of forward secrecy, and 75.2% will use forward secrecy with most browsers.
A certificate may be revoked before it expires, for example because the secrecy of the private key has been compromised. Newer versions of popular browsers such asFirefox,Opera,andInternet ExploreronWindows Vistaimplement theOnline Certificate Status Protocol(OCSP) to verify that this is not the case. The browser sends the certificate's serial number to the certificate authority or its delegate via OCSP (Online Certificate Status Protocol) and the authority responds, telling the browser whether the certificate is still valid or not.The CA may also issue aCRLto tell people that these certificates are revoked. CRLs are no longer required by the CA/Browser forum,nevertheless, they are still widely used by the CAs. Most revocation statuses on the Internet disappear soon after the expiration of the certificates.
SSL (Secure Sockets Layer) and TLS (Transport Layer Security) encryption can be configured in two modes:simpleandmutual. In simple mode, authentication is only performed by the server. The mutual version requires the user to install a personalclient certificatein the web browser for user authentication.In either case, the level of protection depends on the correctness of theimplementationof the software and thecryptographic algorithmsin use.
SSL/TLS does not prevent the indexing of the site by aweb crawler, and in some cases theURIof the encrypted resource can be inferred by knowing only the intercepted request/response size.This allows an attacker to have access to theplaintext(the publicly available static content), and theencrypted text(the encrypted version of the static content), permitting acryptographic attack.
BecauseTLSoperates at a protocol level below that of HTTP and has no knowledge of the higher-level protocols, TLS servers can only strictly present one certificate for a particular address and port combination.In the past, this meant that it was not feasible to usename-based virtual hostingwith HTTPS. A solution calledServer Name Indication(SNI) exists, which sends the hostname to the server before encrypting the connection, although older browsers do not support this extension. Support for SNI is available sinceFirefox2,Opera8,Apple Safari2.1,Google Chrome6, andInternet Explorer 7onWindows Vista.
A sophisticated type ofman-in-the-middle attackcalled SSL stripping was presented at the 2009Blackhat Conference. This type of attack defeats the security provided by HTTPS by changing thehttps:link into anhttp:link, taking advantage of the fact that few Internet users actually type "https" into their browser interface: they get to a secure site by clicking on a link, and thus are fooled into thinking that they are using HTTPS when in fact they are using HTTP. The attacker then communicates in clear with the client.This prompted the development of a countermeasure in HTTP calledHTTP Strict Transport Security.
HTTPS has been shown to be vulnerable to a range oftraffic analysisattacks. Traffic analysis attacks are a type ofside-channel attackthat relies on variations in the timing and size of traffic in order to infer properties about the encrypted traffic itself. Traffic analysis is possible because SSL/TLS encryption changes the contents of traffic, but has minimal impact on the size and timing of traffic. In May 2010, a research paper by researchers fromMicrosoft ResearchandIndiana Universitydiscovered that detailed sensitive user data can be inferred from side channels such as packet sizes. The researchers found that, despite HTTPS protection in several high-profile, top-of-the-line web applications in healthcare, taxation, investment, and web search, an eavesdropper could infer the illnesses/medications/surgeries of the user, his/her family income, and investment secrets.
The fact that most modern websites, including Google, Yahoo!, and Amazon, use HTTPS causes problems for many users trying to access public Wi-Fi hot spots, because acaptive portalWi-Fi hot spot login page fails to load if the user tries to open an HTTPS resource.Several websites, such as NeverSSL,guarantee that they will always remain accessible by HTTP.
Netscape Communicationscreated HTTPS in 1994 for itsNetscape Navigatorweb browser.Originally, HTTPS was used with theSSLprotocol. As SSL evolved intoTransport Layer Security(TLS), HTTPS was formally specified by RFC 2818 in May 2000. Google announced in February 2018 that its Chrome browser would mark HTTP sites as "Not Secure" after July 2018.This move was to encourage website owners to implement HTTPS, as an effort to make theWorld Wide Webmore secure.