Incomputer networking, theUser Datagram Protocol(UDP) is one of the corecommunication protocolsof theInternet protocol suiteused to send messages (transported asdatagramsinpackets) to other hosts on anInternet Protocol(IP) network. Within an IP network, UDP does not require prior communication to set upcommunication channelsor data paths.
UDP is aconnectionlessprotocol meaning that messages are sent without negotiating a connection and that UDP does not keep track of what it has sent.UDP provideschecksumsfordata integrity, andport numbersfor addressing different functions at the source and destination of the datagram. It has nohandshakingdialogues and thus exposes the user's program to anyunreliabilityof the underlying network; there is no guarantee of delivery, ordering, or duplicate protection. If error-correction facilities are needed at the network interface level, an application may instead useTransmission Control Protocol(TCP) orStream Control Transmission Protocol(SCTP) which are designed for this purpose.
UDP is suitable for purposes where error checking and correction are either not necessary or are performed in the application; UDP avoids the overhead of such processing in theprotocol stack. Time-sensitive applications often use UDP because dropping packets is preferable to waiting for packets delayed due toretransmission, which may not be an option in areal-time system.
The protocol was designed byDavid P. Reedin 1980 and formally defined inRFC768.
UDP is a simple message-orientedtransport layerprotocol that is documented inRFC768. Although UDP provides integrity verification (viachecksum) of the header and payload,it provides no guarantees to theupper layer protocolfor message delivery and the UDP layer retains no state of UDP messages once sent. For this reason, UDP sometimes is referred to asUnreliableDatagram Protocol.If transmission reliability is desired, it must be implemented in the user's application.
A number of UDP's attributes make it especially suited for certain applications.
Applications can usedatagram socketsto establish host-to-host communications. An application binds a socket to its endpoint of data transmission, which is a combination of anIP addressand aport. In this way, UDP provides applicationmultiplexing. A port is a software structure that is identified by theport number, a 16-bit integer value, allowing for port numbers between 0 and 65535. Port 0 is reserved but is a permissible source port value if the sending process does not expect messages in response.
TheInternet Assigned Numbers Authority(IANA) has divided port numbers into three ranges.Port numbers 0 through 1023 are used for common, well-known services. OnUnix-likeoperating systems, using one of these ports requiressuperuseroperating permission. Port numbers 1024 through 49151 are theregistered portsused for IANA-registered services. Ports 49152 through 65535 are dynamic ports that are not officially designated for any specific service and may be used for any purpose. These may also be used asephemeral ports, which software running on the host may use to dynamically create communications endpoints as needed.
A UDP datagram consists of a datagramheaderfollowed by adatasection (the payload data for the application). The UDP datagram header consists of 4 fields, each of which is 2 bytes (16 bits):
The use of theChecksumandSource Portfields is optional in IPv4 (light purple background in table). In IPv6 only theSource Portfield is optional. If not used, these fields should be set to zero.
The method used to compute the checksum is defined inRFC768, and efficient calculation is discussed inRFC1071:
Checksum is the 16-bitones' complementof the ones' complement sum of a pseudo header of information from the IP header, the UDP header, and the data, padded with zero octets at the end (if necessary) to make a multiple of two octets.
In other words, all 16-bit words are summed using ones' complement arithmetic. Add the 16-bit values up. On each addition, if a carry-out (17th bit) is produced, swing that 17th carry bit around and add it to the least significant bit of the running total.Finally, the sum is then ones' complemented to yield the value of the UDP checksum field.
If the checksum calculation results in the value zero (all 16 bits 0) it should be sent as the ones' complement (all 1s) as a zero-value checksum indicates no checksum has been calculated.In this case, any specific processing is not required at the receiver, because all 0s and all 1s are equal to zero in 1's complement arithmetic.
The differences betweenIPv4andIPv6are in the pseudo header used to compute the checksum, and that the checksum is not optional in IPv6.Under specific conditions, a UDP application using IPv6 is allowed to use a zero UDP zero-checksum mode with a tunnel protocol.
When UDP runs over IPv4, the checksum is computed using apseudo headerthat contains some of the same information from the realIPv4 header.The pseudo header is not the real IPv4 header used to send an IP packet, it is used only for the checksum calculation.
UDP checksum computation is optional for IPv4. If a checksum is not used it should be set to the value zero.
The checksum is calculated over the following fields:
As IPv6 has larger addresses and a different header layout, the method used to compute the checksum is changed accordingly:
Any transport or other upper-layer protocol that includes the addresses from the IP header in its checksum computation must be modified for use over IPv6, to include the 128-bit IPv6 addresses instead of 32-bit IPv4 addresses.
When computing the checksum, again a pseudo header is used that mimics the realIPv6 header:
The checksum is computed over the following fields:
Lacking reliability, UDP applications may encounter some packet loss, reordering, errors or duplication.  If using UDP, the end-user applications must provide any necessary handshaking such as real-time confirmation that the message has been received. Applications, such asTFTP, may add rudimentary reliability mechanisms into the application layer as needed.If an application requires a high degree of reliability, a protocol such as theTransmission Control Protocolmay be used instead.
Most often, UDP applications do not employ reliability mechanisms and may even be hindered by them.Streaming media, real-time multiplayer games andvoice over IP(VoIP) are examples of applications that often use UDP. In these particular applications, loss of packets is not usually a fatal problem. In VoIP, for example, latency and jitter are the primary concerns.  The use of TCP would cause jitter if any packets were lost as TCP does not provide subsequent data to the application while it is requesting a re-send of the missing data.
Numerous key Internet applications use UDP, including: theDomain Name System(DNS), theSimple Network Management Protocol(SNMP), theRouting Information Protocol(RIP)and theDynamic Host Configuration Protocol(DHCP).
Voice and video traffic is generally transmitted using UDP. Real-time video andaudio streaming protocolsare designed to handle occasional lost packets, so only slight degradation in quality occurs, rather than large delays if lost packets were retransmitted. Because both TCP and UDP run over the same network, in the mid-2000s a few businesses found that an increase in UDP traffic from these real-time applications slightly hindered the performance of applications using TCP such aspoint of sale,accounting, anddatabasesystems (when TCP detects packet loss, it will throttle back its data rate usage).
SomeVPNsystems such asOpenVPNmay use UDP and perform error checking at the application level while implementing reliable connections.WireGuarduses UDP and performs error checking, but does not provide any reliability guarantees, leaving it for the encapsulated protocols to deal with.
QUICis a transport protocol built on top of UDP. QUIC provides a reliable and secure connection.HTTP/3uses QUIC as opposed to earlier versions ofHTTPSwhich use a combination ofTCPandTLSto ensure reliability and security respectively. This means that HTTP/3 uses a single handshake to set up a connection, rather than having two separate handshakes for TCP and TLS, meaning the overall time to establish a connection is reduced.
Transmission Control Protocolis a connection-oriented protocol and requires handshaking to set up end-to-end communications. Once a connection is set up, user data may be sent bi-directionally over the connection.
User Datagram Protocol is a simpler message-basedconnectionless protocol. Connectionless protocols do not set up a dedicated end-to-end connection. Communication is achieved by transmitting information in one direction from source to destination without verifying the readiness or state of the receiver.